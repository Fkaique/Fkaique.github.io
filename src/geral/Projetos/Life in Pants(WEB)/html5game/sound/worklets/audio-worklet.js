AudioWorkletProcessor.prototype._G1=function(){this._H1=true;this.port.onmessage=(_I1)=>{if(_I1.data==="kill")this._H1=false;};};class _J1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._G1();}process(_K1,_L1,parameters){const input=_K1[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _M1=input[c];for(let _N1=0;_N1<_M1.length;++_N1){const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];
_L1[_O1][c][_N1]=_M1[_N1];}}return this._H1;}}class _P1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._G1();}process(_K1,_L1,parameters){const _Q1=_K1[0];const _R1=_K1[1];const output=_L1[0];const gain=parameters.gain;for(let c=0;c<_R1.length;++c){const _M1=_R1[c];const _S1=output[c];for(let _N1=0;_N1<_M1.length;++_N1)_S1[_N1]=_M1[_N1];}for(let c=0;c<_Q1.length;++c){const _M1=_Q1[c];const _S1=output[c];
for(let _N1=0;_N1<_M1.length;++_N1){const _T1=(gain[_N1]!==undefined)?gain[_N1]:gain[0];_S1[_N1]+=_M1[_N1]*_T1;}}return this._H1;}}registerProcessor("audio-bus-input",_J1);registerProcessor("audio-bus-output",_P1);class _U1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _V1=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_W1){super();this._G1();const _X1=_W1.outputChannelCount[0];this._Y1=new Float32Array(_X1);this._Z1=new Uint32Array(_X1);}process(_K1,_L1,parameters){const input=_K1[0];const output=_L1[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _M1=input[c];const _S1=output[c];for(let _N1=0;_N1<_M1.length;++_N1){_S1[_N1]=_M1[_N1];if(this._Z1[c]===0)this._Y1[c]=_M1[_N1];const __1=(factor[_N1]!==undefined)?factor[_N1]:factor[0];++this._Z1[c];this._Z1[c]%=__1;const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];if(_O1>0.0){continue;}let _02=this._Y1[c];const _T1=(gain[_N1]!==undefined)?gain[_N1]:gain[0];_02*=_T1;_02=Math.max(Math.min(_02,
1.0),-1.0);const _12=(resolution[_N1]!==undefined)?resolution[_N1]:resolution[0];const max=(_02>0.0)?_U1._V1[_12]-1:_U1._V1[_12];_02=Math.round(_02*max)/max;const _22=(mix[_N1]!==undefined)?mix[_N1]:mix[0];_S1[_N1]*=(1.0-_22);_S1[_N1]+=(_02*_22);}}return this._H1;}}registerProcessor("bitcrusher-processor",_U1);class _32{constructor(_42=1e-3){this.setTime(_42);}setTime(_42){this._52=Math.exp(-1/(_42*sampleRate));}process(_62,_72){return _62+this._52*(_72-_62);}}class _82{constructor(_92,_a2){this._b2=new _32(_92);
this._c2=new _32(_a2);this._d2=_92;this._e2=_a2;}_f2(_42){if(_42===this._d2)return;this._b2.setTime(_42);this._d2=_42;}_g2(_42){if(_42===this._e2)return;this._c2.setTime(_42);this._e2=_42;}process(_62,_72){if(_62>_72)return this._b2.process(_62,_72);else return this._c2.process(_62,_72);}}class _h2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_i2){super();this._G1();const _b2=_h2.parameterDescriptors.find(_j2=>_j2.name==="attack");const _c2=_h2.parameterDescriptors.find(_j2=>_j2.name==="release");
this._k2=new _82(_b2.defaultValue,_c2.defaultValue);this._l2=0;}process(_m2,_n2,_o2){const input=_m2[0];const output=_n2[0];const bypass=_o2.bypass;const ingain=_o2.ingain;const outgain=_o2.outgain;const threshold=_o2.threshold;const ratio=_o2.ratio;const attack=_o2.attack;const release=_o2.release;if(input.length===0)return this._H1;for(let _N1=0;_N1<input[0].length;++_N1){let frame=input.map(_p2=>_p2[_N1]);output.forEach((_p2,_q2)=>{_p2[_N1]=frame[_q2];});const _r2=(ingain[_N1]!==undefined)?ingain[_N1]:ingain[0];
frame=frame.map(_s2=>_s2*=_r2);const rect=frame.map(_s2=>Math.abs(_s2));const max=Math.max(...rect);const _t2=_u2(max);const _v2=(threshold[_N1]!==undefined)?threshold[_N1]:threshold[0];const _w2=_u2(_v2);const _x2=Math.max(0,_t2-_w2);const _b2=(attack[_N1]!==undefined)?attack[_N1]:attack[0];const _c2=(release[_N1]!==undefined)?release[_N1]:release[0];this._k2._f2(_b2);this._k2._g2(_c2);this._l2=this._k2.process(_x2,this._l2);const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];if(_O1>0)continue;const _12=(ratio[_N1]!==undefined)?ratio[_N1]:ratio[0];
const _y2=(this._l2/_12)-this._l2;const _T1=_z2(_y2);frame=frame.map(_s2=>_s2*=_T1);const _A2=(outgain[_N1]!==undefined)?outgain[_N1]:outgain[0];frame=frame.map(_s2=>_s2*=_A2);output.forEach((_p2,_q2)=>{_p2[_N1]=frame[_q2];});}return this._H1;}}function _u2(_B2){return 20*Math.log10(_B2);}function _z2(_B2){return Math.pow(10,_B2/20);}registerProcessor("compressor-processor",_h2);class _C2 extends AudioWorkletProcessor{static _D2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_C2._D2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_W1){super();this._G1();const _X1=_W1.outputChannelCount[0];const _E2=(_C2._D2*sampleRate)+1;this.buffer=new Array(_X1);this._F2=new Uint32Array(_X1);for(let c=0;c<_X1;++c)this.buffer[c]=new Float32Array(_E2);
}process(_K1,_L1,parameters){const input=_K1[0];const output=_L1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _M1=input[c];const _S1=output[c];for(let _N1=0;_N1<_M1.length;++_N1){_S1[_N1]=_M1[_N1];const _v2=(time[_N1]!==undefined)?time[_N1]:time[0];const _G2=this._H2(c,_v2);const __1=(feedback[_N1]!==undefined)?feedback[_N1]:feedback[0];const _I2=_M1[_N1]+(_G2*__1);this.write(c,_I2);const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];
if(_O1>0.0){continue;}const _22=(mix[_N1]!==undefined)?mix[_N1]:mix[0];_S1[_N1]*=(1-_22);_S1[_N1]+=(_G2*_22);}}return this._H1;}_H2(_J2,_42){const _K2=_42*sampleRate;let _L2=(this._F2[_J2]-~~_K2);let _M2=(_L2-1);while(_L2<0)_L2+=this.buffer[_J2].length;while(_M2<0)_M2+=this.buffer[_J2].length;const frac=_K2-~~_K2;const _N2=this.buffer[_J2][_L2];const _O2=this.buffer[_J2][_M2];return _N2+(_O2-_N2)*frac;}write(_J2,_P2){++this._F2[_J2];this._F2[_J2]%=this.buffer[_J2].length;this.buffer[_J2][this._F2[_J2]]=_P2;
}}registerProcessor("delay-processor",_C2);class _Q2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._G1();}process(_R2,_S2,_T2){const input=_R2[0];const _U2=_S2[0];const _V2=_S2[1];for(let c=0;c<input.length;++c){const _M1=input[c];const _W2=_U2[c];const _X2=_V2[c];for(let _N1=0;_N1<_M1.length;++_N1){_W2[_N1]=_M1[_N1];_X2[_N1]=_M1[_N1];}}return this._H1;}}class _Y2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._G1();}process(_R2,_S2,_T2){const _Q1=_R2[0];const _R1=_R2[1];const output=_S2[0];const bypass=_T2.bypass;for(let c=0;c<_R1.length;++c){const _Z2=_Q1[c];const __2=_R1[c];const _S1=output[c];for(let _N1=0;_N1<_Z2.length;++_N1){const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];if(_O1>0){_S1[_N1]=__2[_N1];}else {_S1[_N1]=_Z2[_N1];}}}return this._H1;}}registerProcessor("eq-input",_Q2);registerProcessor("eq-output",_Y2);class _03 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._G1();}process(_K1,_L1,parameters){const input=_K1[0];const output=_L1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _M1=input[c];const _S1=output[c];for(let _N1=0;_N1<_M1.length;++_N1){_S1[_N1]=_M1[_N1];const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];
if(_O1>0.0){continue;}const _T1=(gain[_N1]!==undefined)?gain[_N1]:gain[0];_S1[_N1]*=_T1;}}return this._H1;}}registerProcessor("gain-processor",_03);class _13 extends AudioWorkletProcessor{static get parameterDescriptors(){const _23=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_23),minValue:10.0,maxValue:_23},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_W1){super();this._G1();const _X1=_W1.outputChannelCount[0];this._33=0;this._43=0;this._53=0;this._63=0;this._73=0;this._83=new Float32Array(_X1);this._93=new Float32Array(_X1);this._a3=new Float32Array(_X1);this._b3=new Float32Array(_X1);this._c3=-1;this._d3=-1;this._e3=-1;}process(_K1,_L1,parameters){const input=_K1[0];const output=_L1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _f3=(freq.length===1&&q.length===1&&gain.length===1);if(_f3)this._g3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _M1=input[c];const _S1=output[c];for(let _N1=0;_N1<_M1.length;++_N1){if(_f3===false){const __1=(freq[_N1]!==undefined)?freq[_N1]:freq[0];const _h3=(q[_N1]!==undefined)?q[_N1]:q[0];const _T1=(gain[_N1]!==undefined)?gain[_N1]:gain[0];this._g3(__1,_h3,_T1);}const _i3=this._53*_M1[_N1]+this._63*this._83[c]+this._73*this._93[c]-this._33*this._a3[c]-this._43*this._b3[c];this._93[c]=this._83[c];
this._83[c]=_M1[_N1];this._b3[c]=this._a3[c];this._a3[c]=_i3;const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];_S1[_N1]=(_O1>0)?_M1[_N1]:_i3;}}return this._H1;}_g3(_j3,_k3,_l3){if(_j3===this._c3&&_k3===this._d3&&_l3===this._e3)return;const _m3=2*Math.PI*_j3/sampleRate;const _n3=Math.cos(_m3);const _o3=Math.sqrt(_l3);const _p3=_o3+1;const _q3=_o3-1;const _r3=_p3*_n3;const _s3=_q3*_n3;const _t3=_p3-_s3;const _u3=_p3+_s3;const alpha=Math.sin(_m3)/(2*_k3);const _v3=(2*Math.sqrt(_o3)*alpha);const _w3=_t3+_v3;
const _33=2*(_q3-_r3);const _43=_t3-_v3;const _53=_o3*(_u3+_v3);const _63=-2*_o3*(_q3+_r3);const _73=_o3*(_u3-_v3);this._33=_33/_w3;this._43=_43/_w3;this._53=_53/_w3;this._63=_63/_w3;this._73=_73/_w3;this._c3=_j3;this._d3=_k3;this._e3=_l3;}}registerProcessor("hi-shelf-processor",_13);class _x3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _y3=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_y3),minValue:10.0,maxValue:_y3},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_W1){super();this._G1();const _X1=_W1.outputChannelCount[0];this._33=0;this._43=0;this._53=0;this._63=0;this._73=0;this._83=new Float32Array(_X1);this._93=new Float32Array(_X1);this._a3=new Float32Array(_X1);this._b3=new Float32Array(_X1);this._z3=-1;this._d3=-1;}process(_K1,_L1,parameters){const input=_K1[0];const output=_L1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _f3=(cutoff.length===1&&q.length===1);if(_f3)this._g3(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _M1=input[c];const _S1=output[c];for(let _N1=0;_N1<_M1.length;++_N1){if(_f3===false){const c=(cutoff[_N1]!==undefined)?cutoff[_N1]:cutoff[0];const _h3=(q[_N1]!==undefined)?q[_N1]:q[0];this._g3(c,_h3);}const _i3=this._53*_M1[_N1]+this._63*this._83[c]+this._73*this._93[c]-this._33*this._a3[c]-this._43*this._b3[c];this._93[c]=this._83[c];this._83[c]=_M1[_N1];this._b3[c]=this._a3[c];
this._a3[c]=_i3;const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];_S1[_N1]=(_O1>0)?_M1[_N1]:_i3;}}return this._H1;}_g3(_A3,_k3){if(_A3===this._z3&&_k3===this._d3)return;const _m3=2*Math.PI*_A3/sampleRate;const alpha=Math.sin(_m3)/(2*_k3);const _n3=Math.cos(_m3);const _w3=1+alpha;const _33=-2*_n3;const _43=1-alpha;const _53=(1+_n3)/2;const _63=-1-_n3;const _73=(1+_n3)/2;this._33=_33/_w3;this._43=_43/_w3;this._53=_53/_w3;this._63=_63/_w3;this._73=_73/_w3;this._z3=_A3;this._d3=_k3;}}registerProcessor("hpf2-processor",
_x3);class _B3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _23=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_23),minValue:10.0,maxValue:_23},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_W1){super();this._G1();const _X1=_W1.outputChannelCount[0];
this._33=0;this._43=0;this._53=0;this._63=0;this._73=0;this._83=new Float32Array(_X1);this._93=new Float32Array(_X1);this._a3=new Float32Array(_X1);this._b3=new Float32Array(_X1);this._c3=-1;this._d3=-1;this._e3=-1;}process(_K1,_L1,parameters){const input=_K1[0];const output=_L1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _f3=(freq.length===1&&q.length===1&&gain.length===1);if(_f3)this._g3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _M1=input[c];const _S1=output[c];for(let _N1=0;_N1<_M1.length;++_N1){if(_f3===false){const __1=(freq[_N1]!==undefined)?freq[_N1]:freq[0];const _h3=(q[_N1]!==undefined)?q[_N1]:q[0];const _T1=(gain[_N1]!==undefined)?gain[_N1]:gain[0];this._g3(__1,_h3,_T1);}const _i3=this._53*_M1[_N1]+this._63*this._83[c]+this._73*this._93[c]-this._33*this._a3[c]-this._43*this._b3[c];this._93[c]=this._83[c];this._83[c]=_M1[_N1];this._b3[c]=this._a3[c];this._a3[c]=_i3;const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];
_S1[_N1]=(_O1>0)?_M1[_N1]:_i3;}}return this._H1;}_g3(_j3,_k3,_l3){if(_j3===this._c3&&_k3===this._d3&&_l3===this._e3)return;const _m3=2*Math.PI*_j3/sampleRate;const _n3=Math.cos(_m3);const _o3=Math.sqrt(_l3);const _p3=_o3+1;const _q3=_o3-1;const _r3=_p3*_n3;const _s3=_q3*_n3;const _t3=_p3-_s3;const _u3=_p3+_s3;const alpha=Math.sin(_m3)/(2*_k3);const _v3=(2*Math.sqrt(_o3)*alpha);const _w3=_u3+_v3;const _33=-2*(_q3+_r3);const _43=_u3-_v3;const _53=_o3*(_t3+_v3);const _63=2*_o3*(_q3-_r3);const _73=_o3*(_t3-_v3);this._33=_33/_w3;
this._43=_43/_w3;this._53=_53/_w3;this._63=_63/_w3;this._73=_73/_w3;this._c3=_j3;this._d3=_k3;this._e3=_l3;}}registerProcessor("lo-shelf-processor",_B3);class _C3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _y3=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_y3),minValue:10.0,maxValue:_y3},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_W1){super();this._G1();const _X1=_W1.outputChannelCount[0];this._33=0;this._43=0;this._53=0;this._63=0;this._73=0;this._83=new Float32Array(_X1);this._93=new Float32Array(_X1);this._a3=new Float32Array(_X1);this._b3=new Float32Array(_X1);this._z3=-1;this._d3=-1;}process(_K1,_L1,parameters){const input=_K1[0];const output=_L1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _f3=(cutoff.length===1&&q.length===1);if(_f3)this._g3(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _M1=input[c];const _S1=output[c];for(let _N1=0;_N1<_M1.length;++_N1){if(_f3===false){const c=(cutoff[_N1]!==undefined)?cutoff[_N1]:cutoff[0];const _h3=(q[_N1]!==undefined)?q[_N1]:q[0];this._g3(c,_h3);}const _i3=this._53*_M1[_N1]+this._63*this._83[c]+this._73*this._93[c]-this._33*this._a3[c]-this._43*this._b3[c];this._93[c]=this._83[c];this._83[c]=_M1[_N1];this._b3[c]=this._a3[c];this._a3[c]=_i3;const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];_S1[_N1]=(_O1>0)?_M1[_N1]:_i3;
}}return this._H1;}_g3(_A3,_k3){if(_A3===this._z3&&_k3===this._d3)return;const _m3=2*Math.PI*_A3/sampleRate;const alpha=Math.sin(_m3)/(2*_k3);const _n3=Math.cos(_m3);const _w3=1+alpha;const _33=-2*_n3;const _43=1-alpha;const _53=(1-_n3)/2;const _63=1-_n3;const _73=(1-_n3)/2;this._33=_33/_w3;this._43=_43/_w3;this._53=_53/_w3;this._63=_63/_w3;this._73=_73/_w3;this._z3=_A3;this._d3=_k3;}}registerProcessor("lpf2-processor",_C3);class _D3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _23=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_23),minValue:10.0,maxValue:_23},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_W1){super();this._G1();const _X1=_W1.outputChannelCount[0];this._33=0;this._43=0;this._53=0;this._63=0;this._73=0;this._83=new Float32Array(_X1);this._93=new Float32Array(_X1);
this._a3=new Float32Array(_X1);this._b3=new Float32Array(_X1);this._c3=-1;this._d3=-1;this._e3=-1;}process(_K1,_L1,parameters){const input=_K1[0];const output=_L1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _f3=(freq.length===1&&q.length===1&&gain.length===1);if(_f3)this._g3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _M1=input[c];const _S1=output[c];for(let _N1=0;_N1<_M1.length;++_N1){if(_f3===false){const __1=(freq[_N1]!==undefined)?freq[_N1]:freq[0];
const _h3=(q[_N1]!==undefined)?q[_N1]:q[0];const _T1=(gain[_N1]!==undefined)?gain[_N1]:gain[0];this._g3(__1,_h3,_T1);}const _i3=this._53*_M1[_N1]+this._63*this._83[c]+this._73*this._93[c]-this._33*this._a3[c]-this._43*this._b3[c];this._93[c]=this._83[c];this._83[c]=_M1[_N1];this._b3[c]=this._a3[c];this._a3[c]=_i3;const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];_S1[_N1]=(_O1>0)?_M1[_N1]:_i3;}}return this._H1;}_g3(_j3,_k3,_l3){if(_j3===this._c3&&_k3===this._d3&&_l3===this._e3)return;const _m3=2*Math.PI*_j3/sampleRate;
const _n3=Math.cos(_m3);const _o3=Math.sqrt(_l3);const alpha=Math.sin(_m3)/(2*_k3);const _E3=alpha/_o3;const _F3=alpha*_o3;const _w3=1+_E3;const _33=-2*_n3;const _43=1-_E3;const _53=1+_F3;const _63=_33;const _73=1-_F3;this._33=_33/_w3;this._43=_43/_w3;this._53=_53/_w3;this._63=_63/_w3;this._73=_73/_w3;this._c3=_j3;this._d3=_k3;this._e3=_l3;}}registerProcessor("peak-eq-processor",_D3);class _G3{constructor(_H3){this._I3=0;this._J3=0;this.feedback=0;this._K3=0;this.buffer=new Float32Array(_H3);this._L3=0;}process(_P2){
const out=this.buffer[this._L3];this._K3=(this._K3*this._I3)+(out*this._J3);this.buffer[this._L3]=_P2+(this._K3*this.feedback);++this._L3;this._L3%=this.buffer.length;return out;}_M3(_N3){this.feedback=Math.min(Math.max(0,_N3),1);}_O3(_P3){this._I3=Math.min(Math.max(0,_P3),1);this._J3=1-this._I3;}}class _Q3{constructor(_H3){this.feedback=0;this.buffer=new Float32Array(_H3);this._L3=0;}process(_P2){const out=this.buffer[this._L3];this.buffer[this._L3]=_P2+(out*this.feedback);++this._L3;this._L3%=this.buffer.length;
return(out-_P2);}_M3(_N3){this.feedback=Math.min(Math.max(0,_N3),1);}}class _R3 extends AudioWorkletProcessor{static _S3=8;static _T3=4;static _U3=0.015;static _V3=0.4;static _W3=0.28;static _X3=0.7;static _Y3=[1116,1188,1277,1356,1422,1491,1557,1617];static _Z3=[1139,1211,1300,1379,1445,1514,1580,1640];static __3=[556,441,341,225];static _04=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_W1){super();this._G1();const _X1=_W1.outputChannelCount[0];this._14=-1;this._24=-1;this._34=new Array(_X1);this._44=new Array(_X1);const _54=[_R3._Y3,_R3._Z3];const _64=[_R3.__3,_R3._04];for(let c=0;c<_X1;++c){this._34[c]=new Array(_R3._S3);this._44[c]=new Array(_R3._T3);for(let i=0;i<_R3._S3;
++i)this._34[c][i]=new _G3(_54[c%_54.length][i]);for(let i=0;i<_R3._T3;++i)this._44[c][i]=new _Q3(_64[c%_64.length][i]);}this._74(0.5);this._O3(0.5);for(let c=0;c<_X1;++c)for(let i=0;i<_R3._T3;++i)this._44[c][i]._M3(0.5);}process(_K1,_L1,parameters){const input=_K1[0];const output=_L1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _M1=input[c];const _S1=output[c];for(let _84=0;_84<_M1.length;++_84){const _N1=(size[_84]!==undefined)?size[_84]:size[0];
const _94=(damp[_84]!==undefined)?damp[_84]:damp[0];this._74(_N1);this._O3(_94);_S1[_84]=_M1[_84];let out=0;const _02=_M1[_84]*_R3._U3;for(let i=0;i<_R3._S3;++i)out+=this._34[c][i].process(_02);for(let i=0;i<_R3._T3;++i)out=this._44[c][i].process(out);const _O1=(bypass[_84]!==undefined)?bypass[_84]:bypass[0];if(_O1>0.0){continue;}const _22=(mix[_84]!==undefined)?mix[_84]:mix[0];_S1[_84]*=(1-_22);_S1[_84]+=(out*_22);}}return this._H1;}_74(_H3){if(_H3===this._14)return;const size=(_H3*_R3._W3)+_R3._X3;for(let c=0;
c<this._34.length;++c)for(let i=0;i<_R3._S3;++i)this._34[c][i]._M3(size);this._14=_H3;}_O3(_P3){if(_P3===this._24)return;const damp=_P3*_R3._V3;for(let c=0;c<this._34.length;++c)for(let i=0;i<_R3._S3;++i)this._34[c][i]._O3(damp);this._24=_P3;}}registerProcessor("reverb1-processor",_R3);class _a4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_W1){super();this._G1();const _X1=_W1.outputChannelCount[0];this._b4=new Array(_X1).fill(1.0);this._c4=new Array(_X1).fill(0.0);this._d4=new Array(_X1).fill(_e4._f4._g4);this._h4=new Array(_X1);for(let c=0;c<_X1;++c){this._h4[c]=new _i4();
this._h4[c]._j4(sampleRate);this._h4[c]._k4(this._b4[c]);this._h4[c]._l4(this._d4[c]);if(c%2===1){this._h4[c]._m4(this._c4[c]);}}}process(_K1,_L1,parameters){const input=_K1[0];const output=_L1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _M1=input[c];const _S1=output[c];for(let _N1=0;_N1<_M1.length;++_N1){_S1[_N1]=_M1[_N1];const _12=(rate[_N1]!==undefined)?rate[_N1]:rate[0];
const _n4=(offset[_N1]!==undefined)?offset[_N1]:offset[0];const _o4=(shape[_N1]!==undefined)?shape[_N1]:shape[0];this._p4(c,_12,_n4,_o4);const _q4=this._h4[c]._H2();const _O1=(bypass[_N1]!==undefined)?bypass[_N1]:bypass[0];if(_O1>0.0){continue;}const i=(intensity[_N1]!==undefined)?intensity[_N1]:intensity[0];const out=_M1[_N1]*_q4*i;_S1[_N1]*=(1.0-i);_S1[_N1]+=out;}}return this._H1;}_p4(_J2,_r4,_s4,_t4){if(_r4!==this._b4[_J2]){this._h4[_J2]._k4(_r4);this._b4[_J2]=_r4;}if(_s4!==this._c4[_J2]){if(_J2%2===1){
this._h4[_J2]._m4(_s4);}this._c4[_J2]=_s4;}if(_t4!==this._d4[_J2]){this._h4[_J2]._l4(_t4);this._d4[_J2]=_t4;}}}registerProcessor("tremolo-processor",_a4);function _e4(){}_e4._f4={_g4:0,_u4:1,_v4:2,_w4:3,_x4:4,_y4:5};_e4._z4=function(_A4){return 1.0-_A4;};_e4._B4=function(_A4){return _A4;};_e4._C4=function(_A4){return 0.5*(Math.sin((_A4*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_e4._D4=function(_A4){if(_A4<0.5){return 0.0;}return 1.0;};_e4._E4=function(_A4){if(_A4<0.5){return 2.0*_A4;}return 2.0-(2.0*_A4);};_e4._F4=[_e4._z4,
_e4._B4,_e4._C4,_e4._D4,_e4._E4];_G4._H4=512;_G4._I4=1.0/_G4._H4;function _G4(_J4){this.data=new Float32Array(_G4._H4);for(let i=0;i<_G4._H4;++i){this.data[i]=_J4(i*_G4._I4);}}_G4.prototype._H2=function(_A4){_A4=Math.max(0.0,_A4);_A4=Math.min(_A4,1.0);const _K4=_A4*_G4._H4;const _L4=~~_K4;const _M4=_K4-_L4;let _L2=_L4;let _M2=_L2+1;if(_L2>=_G4._H4){_L2-=_G4._H4;}if(_M2>=_G4._H4){_M2-=_G4._H4;}const _N2=this.data[_L2];const _O2=this.data[_M2];return _N2+(_O2-_N2)*_M4;};_i4._N4=[];_i4._O4=false;_i4._P4=0.0;_i4._23=20.0;
function _i4(){this._Q4=48000;this.shape=_e4._f4._v4;this.freq=1.0;this._R4=0.0;this._I4=0.0;this._S4=0.0;if(_i4._O4==true){return;}for(let i=0;i<_e4._f4._y4;++i){_i4._N4[i]=new _G4(_e4._F4[i]);}_i4._O4=true;}_i4._T4=function(){return(_i4._O4==true);};_i4.prototype._j4=function(_U4){this._Q4=_U4;this._V4();};_i4.prototype._k4=function(_j3){_j3=Math.max(_i4._P4,_j3);_j3=Math.min(_j3,_i4._23);this.freq=_j3;this._V4();};_i4.prototype._m4=function(_s4){_s4=Math.max(0.0,_s4);_s4=Math.min(_s4,1.0);const _W4=_s4-this._S4;
this._S4=_s4;this._R4+=_W4;while(this._R4>=1.0){this._R4-=1.0;}while(this._R4<0.0){this._R4+=1.0;}};_i4.prototype._l4=function(_t4){_t4=Math.max(0,_t4);_t4=Math.min(_t4,_e4._f4._y4-1);this.shape=_t4;};_i4.prototype._H2=function(){const result=_i4._N4[this.shape]._H2(this._R4);this._R4+=this._I4;while(this._R4>=1.0){this._R4-=1.0;}return result;};_i4.prototype._V4=function(){this._I4=this.freq/this._Q4;};